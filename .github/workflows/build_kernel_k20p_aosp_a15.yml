name: Build Kernel Redmi K20Pro (Soviet-Star-OSS)(AOSP A15) with KSU & SUSFS

on:
  workflow_call:
  workflow_dispatch:

env:
  HOOK_METHOD: "syscall"
  HOOK_OLDER: "false"

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Prepare Environment Variables
      run: |
        CONFIG_ENV=$(grep -w "CONFIG_ENV" Profiles/raphael_aosp_sovietstaross_a15.env | cut -d "=" -f2)
        CONFIG_LIST=(DEVICE_NAME DEVICE_CODENAME EXTRA_CMDS KERNEL_SOURCE KERNEL_BRANCH DEFCONFIG_SOURCE DEFCONFIG_NAME KERNELSU_SOURCE KERNELSU_BRANCH KERNELSU_NAME SUSFS_ENABLE SUSFS_FIXED SUSFS_UPDATE AK3_SOURCE AK3_BRANCH ROM_TEXT)
        for CONFIG in "${CONFIG_LIST[@]}"; do
            VALUE=$(grep -w "$CONFIG" "$CONFIG_ENV" | cut -d ":" -f2 2>/dev/null || grep -w "$CONFIG" "$CONFIG_ENV" | cut -d "=" -f2)
            echo "$CONFIG=$VALUE" >> $GITHUB_ENV
        done
        mv $GITHUB_WORKSPACE/Patches /tmp/

    - name: Maximize Disk Space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 8192
        temp-reserve-mb: 4096
        swap-size-mb: 8192
        remove-dotnet: "true"
        remove-haskell: "true"
        remove-codeql: "true"

    - name: Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git bc bison flex libssl-dev make libc6-dev libncurses5-dev \
          ccache curl unzip python3 device-tree-compiler build-essential lzop zip p7zip-full

    - name: Download Neutron Clang 17.0.2
      run: |
        mkdir clang && cd clang
        wget -q https://github.com/Neutron-Toolchains/clang-build/releases/download/17.0.2/clang-17.0.2.tar.gz
        tar -xf clang-17.0.2.tar.gz
        echo "CLANG_PATH=$PWD/clang-17.0.2" >> $GITHUB_ENV

    - name: Get Kernel Source
      run: |
        git clone --recursive ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_BRANCH }} device_kernel --depth=1
        if [[ -n "${{ env.DEFCONFIG_SOURCE }}" ]]; then
          wget ${{ env.DEFCONFIG_SOURCE }} -O device_kernel/arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
        fi
        KVER=$(head -n3 device_kernel/Makefile | awk '/VERSION|PATCHLEVEL/ {print $3}' | paste -sd '.')
        echo "KERNEL_VERSION=$KVER" >> $GITHUB_ENV

    - name: Prepare KernelSU & SUSFS
      run: |
        cd device_kernel
        mkdir -p drivers/kernelsu
        git clone --depth=1 --filter=blob:none --sparse -b 15.0 https://github.com/SOVIET-ANDROID/kernel_xiaomi_raphael tmp_ksu
        cd tmp_ksu && git sparse-checkout set drivers/kernelsu && cp -r drivers/kernelsu/* ../drivers/kernelsu/ && cd ..
        rm -rf tmp_ksu

        git clone ${{ env.KERNELSU_SOURCE }} -b ${{ env.KERNELSU_BRANCH }} ${{ env.KERNELSU_NAME }}
        ln -sf "$(realpath --relative-to=drivers ${{ env.KERNELSU_NAME }}/kernel)" drivers/kernelsu
        grep -q "kernelsu" drivers/Makefile || echo 'obj-$(CONFIG_KSU) += kernelsu/' >> drivers/Makefile
        grep -q "drivers/kernelsu/Kconfig" drivers/Kconfig || sed -i '/endmenu/i source "drivers/kernelsu/Kconfig"' drivers/Kconfig

        echo "CONFIG_KSU=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

        if [[ "${{ env.SUSFS_ENABLE }}" == "true" ]]; then
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b kernel-${{ env.KERNEL_VERSION }} susfs4ksu --depth=1
          cp susfs4ksu/kernel_patches/fs/* fs/
          cp susfs4ksu/kernel_patches/include/linux/* include/linux/
          echo "CONFIG_KSU_SUSFS=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
        fi

    - name: Apply Kernel Patches (if needed)
      run: |
        cd device_kernel
        # Add your custom patches here if needed

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build-kernel-${{ env.DEVICE_NAME }}
        max-size: 2G

    - name: Build Kernel
      run: |
        export PATH="${{ env.CLANG_PATH }}/bin:$PATH"
        cd device_kernel
        export ARCH=arm64
        export SUBARCH=arm64
        export HOSTCFLAGS="-Wno-error"
        export KCFLAGS="-Wno-error=implicit-function-declaration"

        make CC="ccache clang" LD=ld.lld LLVM=1 LLVM_IAS=1 O=out ${{ env.DEFCONFIG_NAME }}
        make -j$(nproc) CC="ccache clang" LD=ld.lld LLVM=1 LLVM_IAS=1 O=out

    - name: Create Flashable ZIP
      run: |
        cd device_kernel
        mkdir tmp
        cp -f out/arch/arm64/boot/Image.gz-dtb tmp/
        cp -f out/arch/arm64/boot/dtbo.img tmp/ || echo "No dtbo.img"
        cp -rf Anykernel3/* tmp/
        cd tmp
        7za a -mx9 flasher.zip *
        mv flasher.zip ../${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-KSU.zip

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-KSU
        path: device_kernel/*.zip
